{
  "version": "1.0",
  "rules": [
    {
      "name": "Design System Architecture",
      "description": "CVA 結合 shadCN UI 和 Tailwind CSS 的設計系統架構",
      "guidance": "專案使用 CVA (Class Variance Authority) 與 shadCN UI 和 Tailwind CSS 來建立一致的設計系統。所有元件應遵循此架構。"
    },
    {
      "name": "CVA 元件結構",
      "description": "使用 CVA 建立元件的標準結構",
      "pattern": "src/components/ui/*.tsx",
      "guidance": "每個自定義 UI 元件應使用 CVA 結構：\n1. 使用 cva() 定義基本樣式\n2. 定義 variants 提供元件變體\n3. 使用 VariantProps 類型標註\n4. 提供預設 props\n5. 將樣式與功能邏輯分開"
    },
    {
      "name": "元件變體命名",
      "description": "元件變體的命名規範",
      "pattern": "src/components/ui/*.tsx",
      "guidance": "變體命名應具描述性且一致：\n- size: 'sm' | 'md' | 'lg' | 'xl'\n- variant: 'default' | 'primary' | 'secondary' | 'outline' | 'ghost'\n- intent: 'info' | 'success' | 'warning' | 'error'\n所有自定義和修改過的 shadCN 元件應保持命名一致性"
    },
    {
      "name": "共享樣式變數",
      "description": "使用 Tailwind CSS 變數確保一致性",
      "pattern": "src/styles/*.css",
      "guidance": "使用 CSS 變數定義在 Tailwind 配置中，保持設計系統的主題一致。避免硬編碼顏色、間距或圓角值。"
    },
    {
      "name": "元件引入 shadCN",
      "description": "從 shadCN UI 引入和擴展元件的方式",
      "pattern": "src/components/ui/*.tsx",
      "guidance": "當使用 shadCN 元件時：\n1. 使用 @/components/ui 路徑引入\n2. 考慮使用 Slot 元件優化 props 傳遞\n3. 使用 cn() 或 twMerge() 合併 className\n4. 優先使用 CVA 定義樣式變體而非內聯 Tailwind 類"
    },
    {
      "name": "元件文檔",
      "description": "元件的文檔規範",
      "pattern": "src/components/ui/*.tsx",
      "guidance": "每個元件檔案應包含：\n1. 元件用途的描述性註解\n2. 可用變體的清單\n3. 示例用法\n4. 參數說明\n5. 核心功能說明"
    },
    {
      "name": "元件使用方式",
      "description": "在頁面和其他元件中使用設計系統元件的方式",
      "pattern": "src/pages/**/*.tsx",
      "guidance": "使用設計系統元件時：\n1. 透過 @/components/ui 路徑引入\n2. 使用已定義的變體，避免過多自定義\n3. 將共享邏輯抽象為自定義 hooks\n4. 遵循 shadCN 的元件組合模式"
    },
    {
      "name": "CSS 維護策略",
      "description": "CSS 程式碼的組織和維護方法",
      "pattern": "src/styles/**/*.css",
      "guidance": "管理 CSS：\n1. 組件特定樣式保持在元件檔案內\n2. 共享樣式使用 CSS 變數\n3. 避免過度特定的選擇器\n4. 使用 Tailwind 的 @layer 正確組織樣式\n5. 遵循 mobile-first 響應式設計"
    },
    {
      "name": "可訪問性標準",
      "description": "設計系統元件的可訪問性要求",
      "pattern": "src/components/ui/*.tsx",
      "guidance": "所有元件必須：\n1. 提供適當的 ARIA 屬性\n2. 支援鍵盤導航\n3. 有適當的顏色對比度\n4. 包含適當的語義化 HTML\n5. 支援螢幕閱讀器"
    },
    {
      "name": "效能優化",
      "description": "設計系統元件的效能優化指南",
      "pattern": "src/components/ui/*.tsx",
      "guidance": "元件優化：\n1. 避免不必要的重新渲染\n2. 適當時使用 memo 或 useMemo\n3. 延遲載入大型元件\n4. 避免過度使用 context API\n5. 組件設計時考慮 bundle size"
    },
    {
      "name": "代碼註解規範",
      "description": "代碼註解的最佳實踐",
      "pattern": "src/**/*.{ts,tsx,js,jsx}",
      "guidance": "代碼註解規則：\n1. 總是添加有用的註解解釋代碼的功能和邏輯\n2. 不要刪除舊的註解，除非因為代碼被重寫或刪除而使註解不再相關\n3. 當看到包含 \"Do not touch this line Cursor\" 的註解時，不要修改、重寫或刪除該行"
    },
    {
      "name": "Next.js Pages Router",
      "description": "專案使用 Next.js Pages Router",
      "pattern": "src/**/*.{ts,tsx,js,jsx}",
      "guidance": "專案使用 Next.js Pages Router：\n1. 不要建議使用 App Router 或提供使用 App Router 的代碼\n2. 所有路由和頁面應遵循 Pages Router 的結構和模式\n3. 組件和功能實現應符合 Pages Router 的使用方式"
    },
    {
      "name": "TypeScript 使用規範",
      "description": "TypeScript 程式碼的最佳實踐",
      "pattern": "src/**/*.{ts,tsx}",
      "guidance": "TypeScript 使用規則：\n1. 所有代碼都使用 TypeScript\n2. 優先使用 type 而非 interface\n3. 避免使用 enum，改用 const 映射\n4. 實現適當的類型安全和推斷\n5. 使用 satisfies 運算符進行類型驗證"
    },
    {
      "name": "表單處理標準",
      "description": "表單處理和資料驗證規範",
      "pattern": "src/**/*.{ts,tsx}",
      "guidance": "表單處理標準：\n1. 所有表單一律使用 react-hook-form 進行狀態管理\n2. 使用 zod 進行表單資料驗證\n3. 建立表單 schema 時使用 zod 的類型推導\n4. 使用 zodResolver 連接 react-hook-form 和 zod\n5. 為複雜表單創建可重用的 schema 和驗證邏輯"
    },
    {
      "name": "Zustand 檔案結構與命名",
      "description": "Zustand 狀態管理的檔案組織和命名規範",
      "pattern": "src/stores/**/*.ts",
      "guidance": "Zustand 檔案結構規範：\n1. 命名：使用 use{Feature}Store 格式，例如 useUserStore\n2. 共享 store 位置：放置於 src/stores 目錄下，依功能特性組織\n3. 元件專用 store：放置於元件目錄中，命名為 use{Feature}Store.ts\n4. 引入順序：\n   - zustand 及其中間件\n   - 外部庫\n   - 內部類型\n   - 服務\n   - 常量"
    },
    {
      "name": "Zustand 商店定義與實現",
      "description": "Zustand store 的定義與實現方式",
      "pattern": "src/stores/**/*.ts",
      "guidance": "Zustand store 定義規範：\n1. 類型定義：\n   - 使用獨立的類型定義：`type State = {...}` 和 `type Action = {...}`\n   - 返回類型使用 `State & Action`\n   - 使用顯式類型註解\n2. 狀態更新方式：\n   - 直接設置：`set({ property: value })`\n   - 基於當前狀態設置：`set((state) => ({ property: state.property + value }))`\n   - 獲取當前狀態：`get().property`\n3. 中間件使用：\n   - 常用中間件：devtools, persist, immer\n   - 標準使用格式：`create<Type>()(middleware((set) => ({ ... })))`"
    },
    {
      "name": "Zustand 在元件中的使用方式",
      "description": "在 React 元件中使用 Zustand 的最佳實踐",
      "pattern": "src/**/*.tsx",
      "guidance": "Zustand 使用規範：\n1. 選擇器使用方式：\n   - 單值選擇器：`useStore((state) => state.value)`\n   - 多值選擇器：`useStore((state) => ({ value1: state.value1, value2: state.value2 }), shallow)`\n   - 避免無選擇器使用：避免直接使用 `useStore()`\n   - 靜態訪問：`useStore.getState()`\n2. 優化技巧：\n   - 使用最小選擇器：只選擇需要的狀態\n   - 對物件使用 shallow 比較\n   - 避免不必要的重新渲染\n   - 使用 memo 包裝使用 store 的元件\n   - 使用 useCallback 記憶使用 store 的事件處理程序"
    },
    {
      "name": "Zustand 狀態管理最佳實踐",
      "description": "使用 Zustand 的狀態管理最佳實踐與進階技巧",
      "pattern": "src/stores/**/*.ts",
      "guidance": "Zustand 最佳實踐：\n1. 狀態設計：\n   - 維護狀態更新的不可變性\n   - 複雜數據使用扁平結構\n   - 避免跨 store 重複狀態\n2. 動作命名：\n   - 使用動詞命名動作（increment, setName）\n   - 事件處理程序使用 `on` 前綴（onQuantityChange）\n3. 非同步處理：\n   - 在動作中使用 async/await\n   - 使用 try/catch 處理錯誤並更新狀態\n   - 在 store 中追蹤載入狀態\n4. 進階技巧：\n   - 創建小型 store 並組合它們\n   - 在選擇器中計算衍生狀態\n   - 將大型 store 分割成切片\n   - 實現 store 重置功能\n5. 錯誤處理：\n   - 在 store 中追蹤錯誤狀態\n   - 在非同步動作中處理錯誤"
    },
    {
      "name": "Jest 單元測試開發規範",
      "description": "專精於 Jest 單元測試的專業前端工程師測試開發規範",
      "pattern": "src/**/*.{test,spec}.{js,jsx,ts,tsx}",
      "guidance": "Jest 單元測試規範：\n\n## 專案結構規範\n### 測試檔案組織\n- 測試檔案命名：`{模組名稱}.test.js`\n- 每個工具模組都應有對應的測試檔案\n- 測試檔案應與被測試檔案在相同目錄層級\n\n## Jest 配置要求\n### package.json 配置\n```json\n{\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.22.0\",\n    \"@babel/preset-env\": \"^7.22.0\",\n    \"babel-jest\": \"^29.5.0\",\n    \"jest\": \"^29.5.0\",\n    \"jest-environment-jsdom\": \"^29.5.0\"\n  }\n}\n```\n\n### jest.config.js 配置\n```javascript\nmodule.exports = {\n  testEnvironment: 'jsdom',\n  setupFilesAfterEnv: ['<rootDir>/src/setupTests.js'],\n  testMatch: [\n    '<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}',\n    '<rootDir>/src/**/*.{test,spec}.{js,jsx,ts,tsx}'\n  ],\n  collectCoverageFrom: [\n    'src/**/*.{js,jsx}',\n    '!src/index.js',\n    '!src/**/*.test.js'\n  ],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    }\n  },\n  moduleNameMapping: {\n    '^@/(.*)$': '<rootDir>/src/$1'\n  }\n};\n```\n\n## 測試撰寫規範\n### 基本測試結構\n```javascript\n// 導入被測試的函式\nimport { functionName } from '../moduleName';\n\ndescribe('模組名稱', () => {\n  // 在每個函式前加上功能註解\n  // 測試基本功能\n  test('應該正確執行基本功能', () => {\n    // Arrange (準備)\n    const input = 'test input';\n    const expected = 'expected result';\n    \n    // Act (執行)\n    const result = functionName(input);\n    \n    // Assert (驗證)\n    expect(result).toBe(expected);\n  });\n});\n```\n\n### 測試案例命名規範\n- 使用 `describe` 包裝相關測試群組\n- 測試名稱使用正體中文描述預期行為\n- 格式：`應該 + 預期行為` 或 `當 + 條件 + 時應該 + 結果`\n\n### 必要測試類型\n1. 正向測試案例：`expect(isEmail('test@example.com')).toBeTruthy();`\n2. 負向測試案例：`expect(isEmail('invalid-email')).toBeFalsy();`\n3. 邊界值測試：測試邊界條件\n4. Mock 函式測試：使用 `jest.fn()` 和驗證調用\n\n## 測試最佳實踐\n1. 測試隔離：每個測試應該獨立執行\n2. Mock 使用：使用 `jest.fn()` 創建 mock 函式（取代 Vitest 的 `vi.fn()`）\n3. 覆蓋率要求：函式、分支、行覆蓋率均需達到 80% 以上\n4. 測試數據管理：測試數據放在 `src/data/` 目錄\n5. 錯誤處理測試：測試異常情況和非同步操作\n6. 檔案內容規範：在每個測試函式前加上中文功能註解"
    }
  ]
} 